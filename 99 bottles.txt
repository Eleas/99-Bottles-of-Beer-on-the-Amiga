; Name:	99 bottles of beer on the wall.
; Author:	Bj√∂rn Paulsen
; Version:	1.4
; Assembler:	ASM-One V1.48
; Size:	456 bytes (optimized)
; 
; For those who always wanted a drinking song on the Amiga, this 
; routine is just the thing. It prints out the full text of the drinking 
; song "99 Bottles of Beer on the Wall," and is polite about being run
; outside of a Dos environment (i.e. won't crash the Amiga).
;
; Some optimizations have been made, most saliently the branching and
; use of an address register to move the starting address of a string.
; PC-relative addressing worked wonders, but the single biggest impact
; was consolidating the data as much as possible: fewer but longer 
; strings mean fewer syscalls to print them, and it all adds up.
;
; Other optimizations may suggest themselves. If you see them, please
; give me a shout-out. Right now, the address registers are used to
; store and reuse string addresses, and we also use some offsets,
; which though it looks horrible does confer space savings.

print:	MACRO
	move.l	\1, d1
	jsr	PutStr(a6)
	ENDM

SysBase = 4

; Library vector offsets
OpenLibrary  = -552
CloseLibrary = -414
PutStr       = -948

; Actual code
	lea	DosName, a1
	moveq   #36, d0
	movea.l	SysBase.w, a6
	jsr	OpenLibrary(a6)

	tst.b	d0	; Did it work?
	beq.b	NoDos	; If not, we exit
	movea.l d0, a6	; We store the pointer

	moveq   #99, d4 ; number of bottles
	
	; Print first line
bottle_loop:
	move.b	#'N', no_more	; if used, we capitalize
	bsr.s	bottletext
	lea.l	on_the_wall, a1
	print   a1
	lea.l	take_one, a2
	move.l	a2, d1  ; reads the comma part of that string
	add	#32, d1 ; but offset 32 spaces
	jsr	PutStr(a6)
	bsr.s 	bottletext
	move.l	a2, d1
	subq	#4, d1
	jsr	PutStr(a6)
	
	; Print second line
	tst.b	d4
	beq.s	go_to_the_store
	print	a2
	subq.b  #1, d4
	bra.s	go_to_the_store_end

go_to_the_store:
	moveq   #99, d4
	move.l	a2, d1
	add	#35, d1
	jsr	PutStr(a6)

go_to_the_store_end: 	
	move.b	#'n', no_more
	bsr.s   bottletext
	print	a1
	move.l	a2, d1
	subq	#4, d1
	jsr	PutStr(a6)
	move.l	a2, d1
	subq	#2, d1
	jsr	PutStr(a6)
	cmpi.b	#99, d4
	bne.b	bottle_loop	
	move.l	a6, a1
	movea.l	SysBase.w,a6
	jsr	CloseLibrary(a6)

NoDos	moveq	#0, d0
	rts

; Subroutine for printing the bottle text
bottletext:

	lea.l	bottle(pc), a4

; Echo out the number, or "no more" if bottles are 0
	tst.b   d4
	bne.s	bottle_count_nonzero
	lea.l	no_more, a3
	print   a3
	move.b	#'n',no_more ; Restore small initial letter
	addq    #2, a4
	bra.s	bottle_count_nonzero_end

bottle_count_nonzero:
	move.l	d4, d5
	divu.w	#10, d5
	move.b	d5, (a4)
	add.b	#'0',(a4)+
	swap	d5
	move.b  d5, (a4)
	add.b	#'0', (a4)
	cmpi.w	#9, d4
	bls.s	single_digit
	subq	#1, a4

single_digit:

bottle_count_nonzero_end:
	move.b	#'s', bottle+9

; Fix the suffix (if the number of bottles is 1, no 's'
	cmpi.b	#1, d4
	bne.s	post_removed_s
	move.b  #30, bottle+9
	
post_removed_s:
	print a4
	rts

; Data

DosName		dc.b	"dos.library",0
bottle		dc.b	"xx bottles of beer",0
no_more		dc.b    "no more",0
on_the_wall	dc.b	" on the wall",0
period		dc.b	". ",10,0
take_one	dc.b	"Take one down and pass it around, ",0
go_to_store	dc.b	"Go to the store and buy some more, ",0


